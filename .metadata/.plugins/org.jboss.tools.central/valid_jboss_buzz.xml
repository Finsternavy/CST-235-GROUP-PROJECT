<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Kogito Notifications API</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RcSIIexFWvE/kogito-notifications-api.html" /><author><name>Adriel Paredes</name></author><id>https://blog.kie.org/2021/02/kogito-notifications-api.html</id><updated>2021-02-19T20:21:04Z</updated><content type="html">Photo by on  Kogito is not just the implementation of the next generation business automation technologies, but the tools that will support the development, testing, management, etc. Replacing Business Central is not an easy task. 10+ years of development make this a challenging endeavor, but not impossible. So this time I bring you the new Notifications API. This API is an abstraction layer that allows the users (in this case, the developers) to communicate transparently with the channels (i.e. VS Code, dmn.new, bpmn.new) and send notifications using a single endpoint API. Under the hood, each channel will have its own implementation redirecting or transforming those messages to their final form. Notifications API main components and connections MAIN COMPONENTS The main interface is the NotificationsApi itself. Each channel should have its own implementation or a NoOpNotificationsApi will be used. It only contains three methods that will allow you to send those notifications to the channel. export interface NotificationsApi { createNotification(notification: Notification): void; setNotifications(path: string, notifications: Notification[]): void; removeNotifications(path: string): void; } hosted with ❤ by VSCODE CHANNEL Since this is the first implementation we have so far I will give a detailed explanation of our mechanism. Notification is the main “transport” class. It will let you include all the information you need to send to the channel. The most important notification attribute is the path. It sets the group the notifications are going to belong to and also lets the channel open that file in case we decide it to. In case you want to express that notification for the main project I recommend using a project name instead of a path. In that situation, nothing will open in case you click on the Notification. export interface Notification { path: string; severity: NotificationSeverity; message: string; type: NotificationType; } hosted with ❤ by TYPE AND SEVERITY Those two attributes help us to categorize the notifications. Let’s start with type. When you want to notify something there are usually two kinds of state: an ephemeral notification that just informs about a situation and that will be dismissed in a short period of time, or an always present notification that will only be dismissed once the root cause that originates is modified. For that, we modeled two different types: Problem and Alert. Problems are used to show information I want to see all the time, like a validation problem, diagram not connected, a compilation error, an improvement hint. In VS Code, those notifications are going to appear in the Problems tab. On the other hand, we have those ephemeral notifications: a success compilation or validation, to inform a process started or ended, etc. For that kind of situation, we have the Alert type. On VS Code, Those notifications are going to appear as popup/toast messages. Once we define what type of Notification we got, we should define the Severity. This defines if the notification is an error, a warning, information, or success. There are going to be some severities that are not going to match with the selected type (like Hint). In that case they are going to be defaulted as INFO. export type NotificationSeverity = "INFO" | "WARNING" | "ERROR" | "SUCCESS" | "HINT"; export type NotificationType = "PROBLEM" | "ALERT"; hosted with ❤ by USAGE The NotificationAPI has a bidirectional implementation in Kogito. Users can send information to the Channel, or the Channel can ask for information to the Envelope. TYPESCRIPT If you are in the Channel you can simply import that specific channel implementation and start using it. import {VsCodeNotificationsApi} from "@kogito-tooling/notifications/vscode" JAVA From Java you can inject the Notifications API using CDI like this: Notification notification = new Notification(); notification.setPath("src/main/resources/diagram.dmn"); notification.setMessage("The message I want to inform"); notifications.setType(NotificationType.PROBLEM); notification.setSeverity(NotificationSeverity.ERROR); this.notificationsApi.createNotification(notification); hosted with ❤ by import org.appformer.kogito.bridge.client.notifications.NotificationsApi; public class MyEditor{ private NotificationsApi notificationsApi; @Inject public MyEditor(NotificationsApi notificationsApi){ this.notificationsApi = notificationsApi; } } hosted with ❤ by EDITOR VALIDATION I said before that Kogito has a bidirectional implementation and this was mainly done for editors. The main reason was to provide the Editor a way to validate their Diagrams without doing to every time it modifies its content. For that, we provide a validate() method for them that is executed every time the file is saved. The validation won’t prevent the file to be saved but it will show the created notifications in the Channel. If there is no validate method in the editors nothing will happen. To implement the validation in your editor you just simply need to add the validation method like this. Just remember to add the @Validate annotation. import org.uberfire.lifecycle.Validate; … @Validate public Promise validate() { return Promise.resolve(listOfNotifications) } hosted with ❤ by NEXT STEPS In the first iteration, we delivered this API and also the VS Code implementation. The support of this API in other channels is going to be added soon since we also need to design a proper UI and the mechanisms to open files or show different severities. In parallel, DMN, BPMN, SceSim, and PMML teams are also working on using this API for better validation, error, and message handling. To sum up, I wanted to share with you a small video of a PoC we did to see this working in the VSCode, but still, with mock data. We made it to check how the results of our new API were. Hopefully, we will soon see Kogito editors integrated with this API, and its extension to all channels (the first one will be dmn/bpmn.new). We really believe that this new Notification mechanism will help to expand the complete Business Automation developer authoring experience that our team is engaged to deliver. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RcSIIexFWvE" height="1" width="1" alt=""/&gt;</content><dc:creator>Adriel Paredes</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/kogito-notifications-api.html</feedburner:origLink></entry><entry><title>X.509 user certificate authentication with Red Hat’s single sign-on technology</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6d4Doy0jOn0/" /><category term="CI/CD" /><category term="Java" /><category term="Security" /><category term="Authentication" /><category term="OpenSSL" /><category term="Red Hat SSO" /><category term="single sign-on" /><category term="X.509" /><author><name>orivat</name></author><id>https://developers.redhat.com/blog/?p=828667</id><updated>2021-02-19T08:00:55Z</updated><published>2021-02-19T08:00:55Z</published><content type="html">&lt;p&gt;This article illustrates how to configure a browser authentication flow using X.509 user-signed certificates. Once you have set up authentication using X.509 user-signed certificates, your users will not be required to enter a username and password when authenticating against &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; (SSO). Instead, they will present an X.509 certificate to the SSO instance.&lt;/p&gt; &lt;h2&gt;Overview&lt;/h2&gt; &lt;p&gt;The main steps for configuring and using X.509 user-signed certificates for single sign-on authentication are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create a local certificate authority (CA).&lt;/li&gt; &lt;li&gt;Create a user certificate with a private key, a certificate signing request (CSR), and a public key.&lt;/li&gt; &lt;li&gt;Generate a PFX user certificate and upload it to Chrome.&lt;/li&gt; &lt;li&gt;Configure the SSO keystore and truststore.&lt;/li&gt; &lt;li&gt;Create an X.509 browser authentication flow.&lt;/li&gt; &lt;li&gt;Test the X.509 browser authentication flow.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We will go over each of these steps in detail.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;You will need the following components set up in your development environment:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A local virtual machine running &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/2342881"&gt;Red Hat&amp;#8217;s single sign-on technology 7&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; toolkit.&lt;/li&gt; &lt;li&gt;A Chrome web browser.&lt;/li&gt; &lt;li&gt;JDK 8 or JDK 11.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Create a local certificate authority&lt;/h2&gt; &lt;p&gt;X.509 user certificates are signed by a certificate authority. The user first sends to a certificate authority a CSR file, then the CA returns a signed certificate and the root CA, both in &lt;a target="_blank" rel="nofollow" href="https://www.ssl.com/guide/pem-der-crt-and-cer-x-509-encodings-and-conversions/"&gt;PEM format&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Below are the instructions to create your certificate authority if you don&amp;#8217;t have one yet.&lt;/p&gt; &lt;pre&gt;openssl genrsa -aes256 -passout pass:&amp;#60;password&amp;#62; -out ca.pass.key 4096 openssl rsa -passin pass:&amp;#60;password&amp;#62; -in ca.pass.key -out ca.key openssl req -new -x509 -days 3650 -key ca.key -out ca.pem &lt;/pre&gt; &lt;p&gt;Here is an example certificate generation request:&lt;/p&gt; &lt;pre&gt;genrsa -aes256 -passout pass:password -out ca.pass.key 4096 Generating RSA private key, 4096 bit long modulus (2 primes) .......................................................................................................................................................................................................++++ ..............................++++ e is 65537 (0x010001) openssl rsa -passin pass:password -in ca.pass.key -out ca.key writing RSA key openssl req -new -x509 -days 3650 -key ca.key -out ca.pem You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there is a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]:US State or Province Name (full name) []:Carolina Locality Name (eg, city) [Default City]:Raleigh Organization Name (eg, company) [Default Company Ltd]:Red Hat Organizational Unit Name (eg, section) []:RH-SSO Common Name (eg, your name or your server's hostname) []:localhost Email Address []: &lt;/pre&gt; &lt;h2&gt;Step 2: Create user certificates&lt;/h2&gt; &lt;p&gt;Note that our target test user is &lt;code&gt;user1&lt;/code&gt;. The test user will also be created in the SSO realm.&lt;/p&gt; &lt;p&gt;The tasks to generate a user certificate are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Generate a user private key.&lt;/li&gt; &lt;li&gt;Generate a user-signed certificate request.&lt;/li&gt; &lt;li&gt;Generate a user-signed request signed by the CA.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Generate a user private key&lt;/h3&gt; &lt;p&gt;The following command generates a user private key:&lt;/p&gt; &lt;pre&gt;CLIENT_ID="user1" CLIENT_SERIAL=01 openssl genrsa -aes256 -passout pass:&amp;#60;password&amp;#62; -out ${CLIENT_ID}.pass.key 4096 openssl rsa -passin pass:&amp;#60;password&amp;#62; -in ${CLIENT_ID}.pass.key -out ${CLIENT_ID}.key &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;CLIENT_SERIAL&lt;/code&gt; represents the serial number. It needs to be unique within the CA. &lt;code&gt;CLIENT_ID&lt;/code&gt; corresponds to the username, in this case &lt;code&gt;user1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example of a generated user private key:&lt;/p&gt; &lt;pre&gt;CLIENT_ID="user1" CLIENT_SERIAL=01 openssl genrsa -aes256 -passout pass:password -out ${CLIENT_ID}.pass.key 4096 Generating RSA private key, 4096 bit long modulus (2 primes) ........................................................................................................................................................................................................++++ ....................++++ e is 65537 (0x010001) openssl rsa -passin pass:password -in ${CLIENT_ID}.pass.key -out ${CLIENT_ID}.key writing RSA key &lt;/pre&gt; &lt;h3&gt;Generate a user-signed certificate request&lt;/h3&gt; &lt;p&gt;The following command generates a user-signed certificate request key:&lt;/p&gt; &lt;pre&gt;openssl req -new -key ${CLIENT_ID}.key -out ${CLIENT_ID}.csr &lt;/pre&gt; &lt;p&gt;Here is an example of a generated user-signed certificate request:&lt;/p&gt; &lt;pre&gt;openssl req -new -key ${CLIENT_ID}.key -out ${CLIENT_ID}.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]:FR State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Organization Name (eg, company) [Default Company Ltd]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []:user1 Email Address []: Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: &lt;/pre&gt; &lt;h3&gt;Generate a user-signed request signed by the CA (public certificate)&lt;/h3&gt; &lt;p&gt;The CA receives a CSR and in return provides a signed certificate in PEM file format. The certificate is signed by the root CA.&lt;/p&gt; &lt;p&gt;Here is the command to generate a user-signed request signed by the CA:&lt;/p&gt; &lt;pre&gt;openssl x509 -req -days 3650 -in ${CLIENT_ID}.csr -CA ca.pem -CAkey ca.key -set_serial ${CLIENT_SERIAL} -out ${CLIENT_ID}.pem &lt;/pre&gt; &lt;p&gt;Here is an example response:&lt;/p&gt; &lt;pre&gt;openssl x509 -req -days 3650 -in ${CLIENT_ID}.csr -CA ca.pem -CAkey ca.key -set_serial ${CLIENT_SERIAL} -out ${CLIENT_ID}.pem Signature ok subject=C = FR, L = Default City, O = Default Company Ltd, CN = user1 Getting CA Private Key &lt;/pre&gt; &lt;h2&gt;Step 3: Generate a PFX user certificate and upload it to Chrome&lt;/h2&gt; &lt;p&gt;Web browsers expect to upload certificates using the PFX (&lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/PKCS_12"&gt;PKCS #12&lt;/a&gt;) file format, which contains a private key and a public key. We&amp;#8217;re using Chrome for this example.&lt;/p&gt; &lt;h3&gt;Generate a user PFX file&lt;/h3&gt; &lt;p&gt;Enter the following command to generate a user PFX file:&lt;/p&gt; &lt;pre&gt;openssl pkcs12 -export -out ${CLIENT_ID}.pfx -inkey ${CLIENT_ID}.key -in ${CLIENT_ID}.pem &lt;/pre&gt; &lt;p&gt;Here is an example response:&lt;/p&gt; &lt;pre&gt;Enter Export Password: Verifying - Enter Export Password: &lt;/pre&gt; &lt;h3&gt;Upload the user certificate to Chrome&lt;/h3&gt; &lt;p&gt;Next, go to &lt;b&gt;chrome://settings/certificates&lt;/b&gt; and import the user PFX certificate into the Chrome browser, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_831287" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b.png"&gt;&lt;img aria-describedby="caption-attachment-831287" class="wp-image-831287 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-1024x393.png" alt="Use the Chrome settings to import user certificate p12." width="640" height="246" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-1024x393.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-300x115.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b-768x295.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc4ff669688b.png 1280w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831287" class="wp-caption-text"&gt;Figure 1: Use Chrome settings to import the PFX certificate.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Configure the SSO keystore and truststore&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s single sign-on technology requires using a keystore and a truststore for mutual secure socket layer (SSL) authentication. Furthermore, you need to place both the keystore and truststore in your &lt;code&gt;&amp;#60;jboss-home-dir&amp;#62;/standalone/configuration&lt;/code&gt; directory. SSO is installed in the &lt;code&gt;&amp;#60;jboss-home-dir&amp;#62;&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;We will do the following to create and use an X.509 keystore and truststore:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a keystore using the &lt;code&gt;keytool&lt;/code&gt; utility.&lt;/li&gt; &lt;li&gt;Create a truststore using the &lt;code&gt;keytool&lt;/code&gt; utility.&lt;/li&gt; &lt;li&gt;Add keystore and truststore to &lt;code&gt;standalone.xml&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;ssl-realm&lt;/code&gt; security as &lt;code&gt;https-listener&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that &lt;code&gt;keytool&lt;/code&gt; is a Java SDK command used to create Java keystores.&lt;/p&gt; &lt;h3&gt;Create a keystore using keytool&lt;/h3&gt; &lt;p&gt;Enter the following command to create a keystore using &lt;code&gt;keytool&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;keytool -genkey -alias localhost -keyalg RSA -keystore keystore.jks -validity 10950 &lt;/pre&gt; &lt;p&gt;Here is an example:&lt;/p&gt; &lt;pre&gt;Enter keystore password: Re-enter new password: What is your first and last name? [Unknown]: localhost What is the name of your organizational unit? [Unknown]: Keycloak What is the name of your organization? [Unknown]: Red Hat What is the name of your City or Locality? [Unknown]: Westford What is the name of your State or Province? [Unknown]: MA What is the two-letter country code for this unit? [Unknown]: US Is CN=localhost, OU=Keycloak, O=Red Hat, L=Westford, ST=MA, C=US correct? [no]: yes Enter key password for &amp;#60;localhost&amp;#62; (RETURN if same as keystore password): Warning: The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using "keytool -importkeystore -srckeystore keycloak.jks -destkeystore keycloak.jks -destst &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For a more detailed guide to creating the keystore, see &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_installation/#enabling-ssl-https-for-the-keycloak-server"&gt;&lt;i&gt;Enabling SSL/HTTPS for the Keycloak Server&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Create a truststore using keytool&lt;/h3&gt; &lt;p&gt;The following command creates a truststore using &lt;code&gt;keytool&lt;/code&gt;. (Note that we create the truststore by importing a PEM certificate. Here, we&amp;#8217;re using the root CA.)&lt;/p&gt; &lt;pre&gt;keytool -import -alias HOSTDOMAIN -keystore truststore.jks -file host-certificate.cer &lt;/pre&gt; &lt;p&gt;Here is an example:&lt;/p&gt; &lt;pre&gt;keytool -import -alias root-ca -keystore truststore.jks -file ca.pem Enter keystore password: Re-enter new password: Owner: CN=localhost, OU=RH-SSO, O=Red Hat, L=Raleigh, ST=Carolina, C=US Issuer: CN=localhost, OU=RH-SSO, O=Red Hat, L=Raleigh, ST=Carolina, C=US Serial number: 22834205f8cb27b0528338669e74c0e4c37f47be Valid from: Fri Nov 27 14:56:33 CET 2020 until: Mon Nov 25 14:56:33 CET 2030 Certificate fingerprints: MD5: D0:D1:AC:6F:9E:5C:6B:FF:AD:DD:FA:69:1F:46:2E:D4 SHA1: 54:E9:79:E0:ED:7C:72:F5:3A:C1:88:1A:FA:3D:64:3E:69:16:0C:21 SHA256: 30:FF:C8:5C:D2:DF:0F:16:00:00:DC:1D:CB:85:C2:67:32:FB:E7:66:6C:A6:7C:E1:CB:58:32:F3:61:56:1C:79 Signature algorithm name: SHA256withRSA Subject Public Key Algorithm: 4096-bit RSA key Version: 3 &lt;/pre&gt; &lt;p&gt;Extensions:&lt;/p&gt; &lt;pre&gt;#1: ObjectId: 2.5.29.35 Criticality=false AuthorityKeyIdentifier [ KeyIdentifier [ 0000: CA 65 3A 64 27 B7 C9 19 5C 98 8F A2 83 80 45 86 .e:d'...\.....E. 0010: 7A 36 89 00 z6.. ] ] #2: ObjectId: 2.5.29.19 Criticality=true BasicConstraints:[ CA:true PathLen:2147483647 ] #3: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000: CA 65 3A 64 27 B7 C9 19 5C 98 8F A2 83 80 45 86 .e:d'...\.....E. 0010: 7A 36 89 00 z6.. ] ] Trust this certificate? [no]: yes Certificate was added to keystore &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_installation/#_truststore"&gt;&lt;i&gt;Outgoing HTTPS Request Truststore&lt;/i&gt;&lt;/a&gt; for more about creating the truststore.&lt;/p&gt; &lt;h3&gt;Add the keystore and truststore to standalone.xml&lt;/h3&gt; &lt;p&gt;Next, we need to add a &lt;code&gt;security-realm&lt;/code&gt;, &lt;code&gt;ssl-realm/&lt;/code&gt;, which contains both the keystore and truststore:&lt;/p&gt; &lt;pre&gt; &amp;#60;security-realm name="ssl-realm"&amp;#62; &amp;#60;server-identities&amp;#62; &amp;#60;ssl&amp;#62; &amp;#60;keystore path="keystore.jks" relative-to="jboss.server.config.dir" keystore-password=&amp;#60;keystore-password&amp;#62;/&amp;#62; &amp;#60;/ssl&amp;#62; &amp;#60;/server-identities&amp;#62; &amp;#60;authentication&amp;#62; &amp;#60;truststore path="truststore.jks" relative-to="jboss.server.config.dir" keystore-password=&amp;#60;trust-store-password&amp;#62;/&amp;#62; &amp;#60;/authentication&amp;#62; &amp;#60;/security-realm&amp;#62; &lt;/pre&gt; &lt;h3&gt;Add ssl-realm security as https-listener&lt;/h3&gt; &lt;p&gt;Finally, we will add &lt;code&gt;ssl-realm&lt;/code&gt; security as &lt;code&gt;https-listener&lt;/code&gt;. Comment out the previous &lt;code&gt;https-listener&lt;/code&gt;, which was related to the &lt;code&gt;ApplicationRealm&lt;/code&gt; security realm. Then, let &lt;code&gt;https-listener&lt;/code&gt; point to the &lt;code&gt;ssl-realm&lt;/code&gt; security realm. Here&amp;#8217;s an example of the required configuration:&lt;/p&gt; &lt;pre&gt; &amp;#60;server name="default-server"&amp;#62; &amp;#60;http-listener name="default" socket-binding="http" redirect-socket="https" enable-http2="true"/&amp;#62; &amp;#60;!-- &amp;#60;https-listener name="https" socket-binding="https" security-realm="ApplicationRealm" enable-http2="true"/&amp;#62; --&amp;#62; &lt;strong&gt;&amp;#60;https-listener name="https" socket-binding="https" security-realm="ssl-realm" verify-client="REQUESTED"/&amp;#62;&lt;/strong&gt; &amp;#60;host name="default-host" alias="localhost"&amp;#62; &amp;#60;location name="/" handler="welcome-content"/&amp;#62; &amp;#60;http-invoker security-realm="ApplicationRealm"/&amp;#62; &amp;#60;/host&amp;#38;gt; &amp;#60;/server&amp;#62; &lt;/pre&gt; &lt;h2&gt;Step 5: Create the X.509 browser authentication flow&lt;/h2&gt; &lt;p&gt;Before we can use the SSO instance, we need to create a new realm named &lt;code&gt;X509_demo&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Go to the left-hand side panel, and clik &lt;b&gt;Add Realm&lt;/b&gt; and enter the realm name, &lt;code&gt;X509_demo&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the realm name &lt;code&gt;X509_demo&lt;/code&gt; is created, you can use the &lt;b&gt;Add User&lt;/b&gt; button to a add a new user, &lt;b&gt;user1&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_832087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e.png"&gt;&lt;img aria-describedby="caption-attachment-832087" class="wp-image-832087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-1024x245.png" alt="Add user1 to the X509_demo." width="640" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-1024x245.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fc5fb82d849e-768x184.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-832087" class="wp-caption-text"&gt;Figure 2: Create the X509_demo and add user1 to the realm.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, we can perform the following tasks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create the SSO X.509 browser authentication flow.&lt;/li&gt; &lt;li&gt;Configure the X.509 certificate within SSO.&lt;/li&gt; &lt;li&gt;Set the authentication bindings.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Create the SSO X.509 browser authentication flow&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll use the &lt;strong&gt;Authentication&lt;/strong&gt; page to create the SSO X.509 browser authentication flow, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_831387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733.png"&gt;&lt;img aria-describedby="caption-attachment-831387" class="wp-image-831387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-1024x328.png" alt="Set up the SSO browser flow on the Authentication page." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733-768x246.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc5027161733.png 1482w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831387" class="wp-caption-text"&gt;Figure 3: Set up a new SSO browser authentication flow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Do the following to set up the SSO browser flow:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Copy the default browser flow and rename it to &lt;b&gt;X.509 Browser&lt;/b&gt;.&lt;/li&gt; &lt;li&gt;Add &lt;code&gt;X.509 validate username form (X.509-config)&lt;/code&gt; under the &lt;b&gt;Identity Provider Redirector&lt;/b&gt; line.&lt;/li&gt; &lt;li&gt;Set this execution step to &lt;b&gt;Alternative&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication#adding_x_509_client_certificate_authentication_to_a_browser_flow"&gt;&lt;i&gt;Adding X.509 Client Certificate Authentication to a Browser Flow&lt;/i&gt;&lt;/a&gt; in the SSO documentation for further instructions.&lt;/p&gt; &lt;p&gt;Figure 4 shows the dialog to add the &lt;strong&gt;X509 Validate Username Form&lt;/strong&gt; to the execution flow.&lt;/p&gt; &lt;div id="attachment_870157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png"&gt;&lt;img aria-describedby="caption-attachment-870157" class="wp-image-870157" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png" alt="The dialog to add the form and save it." width="640" height="152" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400.png 1383w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-300x71.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-768x183.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/img_602ba4a7de400-1024x244.png 1024w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870157" class="wp-caption-text"&gt;Figure 4: Add the X509 Validate Username Form to the execution flow.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Configure an X.509 certificate within SSO&lt;/h3&gt; &lt;p&gt;To set up the X.509 certificate within SSO, go to the X.509 browser flow and select &lt;b&gt;Config Action&lt;/b&gt; from the &lt;b&gt;X509 Validate Username Form&lt;/b&gt;. You will be redirected to the &lt;strong&gt;X509-Config&lt;/strong&gt; form, where you can complete the certificate authentication using &lt;code&gt;cn=user1&lt;/code&gt; as the &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;On this form, switch the &lt;b&gt;User Identity Source&lt;/b&gt; toggle to &lt;strong&gt;Subject&amp;#8217;s Common Name&lt;/strong&gt; and the &lt;b&gt;User Mapping Method&lt;/b&gt; to &lt;strong&gt;Username or email&lt;/strong&gt;. Figure 5 shows these updates.&lt;/p&gt; &lt;div id="attachment_831477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc.png"&gt;&lt;img aria-describedby="caption-attachment-831477" class="wp-image-831477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-1024x691.png" alt="Complete the certificate authentication on the X509-Config form." width="640" height="432" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-1024x691.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-300x203.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc-768x519.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50e63c9ffc.png 1050w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831477" class="wp-caption-text"&gt;Figure 5: Use the X509-Config form to complete the certificate authentication.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Set the authentication bindings&lt;/h3&gt; &lt;p&gt;On the &lt;strong&gt;Authentication&lt;/strong&gt; page, use the &lt;b&gt;Bindings&lt;/b&gt; tab to set the authentication bindings to the new authentication flow you&amp;#8217;ve just created, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_831497" style="width: 527px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png"&gt;&lt;img aria-describedby="caption-attachment-831497" class="wp-image-831497 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png" alt="The Authentication screen with the Bindings tab open." width="517" height="330" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f.png 517w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc50ee34c32f-300x191.png 300w" sizes="(max-width: 517px) 100vw, 517px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831497" class="wp-caption-text"&gt;Figure 6: Set the new authentication flow in the Bindings tab.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 6: Test the X.509 browser authentication flow&lt;/h2&gt; &lt;p&gt;To test the authentication flow, go to the test URL: &lt;b&gt;https://localhost:8443/auth/realms/x509_demo/account&lt;/b&gt;. You should see the screen shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_831417" style="width: 605px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png"&gt;&lt;img aria-describedby="caption-attachment-831417" class="wp-image-831417 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png" alt="The X509_demo screen. Click Continue to be logged in as user1. width=" width="595" height="537" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c.png 595w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/img_5fc504bf0396c-300x271.png 300w" sizes="(max-width: 595px) 100vw, 595px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-831417" class="wp-caption-text"&gt;Figure 7: Use the X.509 demo to automatically authenticate the user1 X.509 certificate.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you click &lt;strong&gt;Continue&lt;/strong&gt;, you should be automatically authenticated through your user1 X.509 certificate, without being prompted to enter a username and password.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Using X.509 certificates for authentication hardens security by authenticating users to the servers, so the username and password are not exposed. If you need to keep your username-password authentication scheme, you can use a second authentication factor such as a &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication"&gt;one-time password (OTP)&lt;/a&gt; provided by SSO. Red Hat&amp;#8217;s single sign-on technology also provides &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.4/html/server_administration_guide/authentication#webauthn"&gt;tech preview support for W3C Web Authentication (WebAuthn)&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#38;linkname=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F19%2Fx-509-user-certificate-authentication-with-red-hats-single-sign-on-technology%2F&amp;#038;title=X.509%20user%20certificate%20authentication%20with%20Red%20Hat%E2%80%99s%20single%20sign-on%20technology" data-a2a-url="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/" data-a2a-title="X.509 user certificate authentication with Red Hat’s single sign-on technology"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/"&gt;X.509 user certificate authentication with Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6d4Doy0jOn0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article illustrates how to configure a browser authentication flow using X.509 user-signed certificates. Once you have set up authentication using X.509 user-signed certificates, your users will not be required to enter a username and password when authenticating against Red Hat&amp;#8217;s single sign-on technology (SSO). Instead, they will present an X.509 certificate to the SSO [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/"&gt;X.509 user certificate authentication with Red Hat&amp;#8217;s single sign-on technology&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">828667</post-id><dc:creator>orivat</dc:creator><dc:date>2021-02-19T08:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/19/x-509-user-certificate-authentication-with-red-hats-single-sign-on-technology/</feedburner:origLink></entry><entry><title type="html">3 steps to author BPMN and DMN assets on GitHub Codespaces</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vyHheCUlFpk/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html" /><author><name>Eder Ignatowicz</name></author><id>https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html</id><updated>2021-02-19T05:00:00Z</updated><content type="html">Recently, GitHub launched early access to , an online development environment hosted by GitHub and powered by Visual Studio Code, that allows you to develop entirely in the cloud. Online development environments are a recent trend in the industry and can potentially be a game-changer for developers. But the question is, can I also develop my Business Automation assets in the cloud? Yes, you can! Do you want to see it how? Let’s do it in a 3 easy steps: 1-) CREATE YOUR GITHUB CODESPACE Go to and create a code space based on any GitHub repository[1]: [1] If you don’t have access yet, you can request early access 2-) INSTALL RED HAT BUSINESS AUTOMATION BUNDLE Now your Codespace is live, and you can work on any GitHub repository in an online VS Code. The next step is to install our extensions. Go to the Extensions menu and search for “Red Hat Business Automation Bundle”. This will automatically install our BPMN and DMN extensions. 3-) AUTHOR YOUR BPMN AND DMN ASSETS You are now ready to author your BPMN and DMN assets as any other VS Code asset. You can also drag and drop any file of your computer into Codespaces, making it super easy to import the assets that you created on and . That’s it! Thanks for reading and I hope you like it. Let’s develop our Business Automation Assets in the cloud. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vyHheCUlFpk" height="1" width="1" alt=""/&gt;</content><dc:creator>Eder Ignatowicz</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html</feedburner:origLink></entry><entry><title type="html">RESTEasy 3.15.0.Final is now available</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hjNEeeR06DE/" /><author><name /></author><id>https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/</id><updated>2021-02-18T19:52:00Z</updated><dc:creator /><summary type="html">&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hjNEeeR06DE" height="1" width="1" alt=""/&gt;</summary><feedburner:origLink>https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/</feedburner:origLink></entry><entry><title type="html">Byteman 4.0.14 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ImgC5mf259o/byteman-4014-has-been-released.html" /><author><name>Andrew Dinn</name></author><id>http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html</id><updated>2021-02-18T14:37:00Z</updated><content type="html">Byteman 4.0.14 is now available from the and from the . It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.14 is a maintenance release which fixes a few minor issues. More details are provided in the .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ImgC5mf259o" height="1" width="1" alt=""/&gt;</content><dc:creator>Andrew Dinn</dc:creator><feedburner:origLink>http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html</feedburner:origLink></entry><entry><title>How to work around Docker’s new download rate limit on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EKHJid8FAQ8/" /><category term="Containers" /><category term="Kubernetes" /><category term="Open source" /><author><name>Joel Lord</name></author><id>https://developers.redhat.com/blog/?p=870297</id><updated>2021-02-18T08:00:17Z</updated><published>2021-02-18T08:00:17Z</published><content type="html">&lt;p&gt;Have you recently tried running &lt;code&gt;oc new-app &amp;#60;docker-image&amp;#62;&lt;/code&gt;on &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt; and received a similar error message to the one below?&lt;/p&gt; &lt;pre&gt;W0216 12:21:52.014221 671649 dockerimagelookup.go:237] container image registry lookup failed: docker.io/username/image:latest: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit &lt;/pre&gt; &lt;p&gt;If so, you &lt;strong&gt;do not need to upgrade your Docker account to a paid one&lt;/strong&gt;. Instead, you can use a secret to pull your images as an authenticated Docker Hub user.&lt;/p&gt; &lt;h2&gt;Docker&amp;#8217;s new rate limit&lt;/h2&gt; &lt;p&gt;Docker recently &lt;a target="_blank" rel="nofollow" href="https://www.docker.com/increase-rate-limits"&gt;changed its policy&lt;/a&gt; for downloading images as an anonymous user. The company now has a limit of 100 downloads every six hours from a single IP address.&lt;/p&gt; &lt;p&gt;If you are using the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;OpenShift Developer Sandbox&lt;/a&gt; to experiment with a free OpenShift cluster, like I was recently, then you might encounter the error message shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_870327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit.png"&gt;&lt;img aria-describedby="caption-attachment-870327" class="wp-image-870327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-1024x278.png" alt="" width="640" height="174" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-1024x278.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit-768x208.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_rate_limit.png 1132w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870327" class="wp-caption-text"&gt;Figure 1: The new rate limit error message from Docker.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You might receive this error message after trying to create a new application with the &lt;code&gt;$ oc new-app&lt;/code&gt; command or from the user interface (UI). The issue is that many users are using the same cluster at the same time. Whenever someone tries to create a new application from a Docker image, the cluster downloads the image as an anonymous user, which counts toward the new rate limit. Eventually, the limit is reached, and the error message pops up.&lt;/p&gt; &lt;p&gt;Fortunately, the workaround is easy.&lt;/p&gt; &lt;h2&gt;Authenticate to your Docker Hub account&lt;/h2&gt; &lt;p&gt;All you have to do to avoid Docker&amp;#8217;s new rate-limit error is authenticate to your Docker Hub account. After you&amp;#8217;ve authenticated to the account, you won&amp;#8217;t be pulling the image as an anonymous user but as an authenticated user. The image download will count against your personal limit of 200 downloads per six hours instead of the 100 downloads shared across all anonymous cluster users.&lt;/p&gt; &lt;p&gt;You can use the following command to authenticate:&lt;/p&gt; &lt;pre&gt;$ oc create secret docker-registry docker --docker-server=docker.io --docker-username=&amp;#60;username&amp;#62; --docker-password=&amp;#60;password&amp;#62; --docker-email=&amp;#60;email&amp;#62; $ oc secrets link default docker --for=pull $ oc new-app &amp;#60;username&amp;#62;/&amp;#60;image&amp;#62; --source-secret=docker &lt;/pre&gt; &lt;p&gt;Note that it is recommended that you &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/docker-hub/access-tokens/"&gt;use an access token&lt;/a&gt; here instead of your actual password. Using an access token is also the only way to authenticate if you have two-factor authentication set up on your account.&lt;/p&gt; &lt;p&gt;If you prefer to use the UI, as I do, click &lt;b&gt;Create an image pull secret&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_870337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret.png"&gt;&lt;img aria-describedby="caption-attachment-870337" class="wp-image-870337 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-1024x480.png" alt="" width="640" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-1024x480.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-300x141.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret-768x360.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/2021-02-16_pull_secret.png 1238w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-870337" class="wp-caption-text"&gt;Figure 2: Adding a pull secret from the Docker UI.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Either way, you can quickly create an image pull secret, authenticate to your Docker Hub account, and get back to experimenting in the OpenShift Developer Sandbox.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Docker&amp;#8217;s new download rate limit has caught a few of us by surprise, but the workaround is easy. This article showed you how to use a secret to pull your images as an authenticated Docker Hub user. Once you&amp;#8217;ve done that, you will be able to download images without hitting the rate limit error.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#38;linkname=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F18%2Fhow-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift%2F&amp;#038;title=How%20to%20work%20around%20Docker%E2%80%99s%20new%20download%20rate%20limit%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/" data-a2a-title="How to work around Docker’s new download rate limit on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/"&gt;How to work around Docker&amp;#8217;s new download rate limit on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EKHJid8FAQ8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Have you recently tried running oc new-app &amp;#60;docker-image&amp;#62;on Red Hat OpenShift and received a similar error message to the one below? W0216 12:21:52.014221 671649 dockerimagelookup.go:237] container image registry lookup failed: docker.io/username/image:latest: toomanyrequests: You have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limit If so, you do not need [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/"&gt;How to work around Docker&amp;#8217;s new download rate limit on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">870297</post-id><dc:creator>Joel Lord</dc:creator><dc:date>2021-02-18T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/18/how-to-work-around-dockers-new-download-rate-limit-on-red-hat-openshift/</feedburner:origLink></entry><entry><title type="html">VU Alumni Spotlight - Open Key to Every Career</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xg_5DGILIUE/vu-alumni-spotlight-open-key-to-every-career.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/Tk5_1C1ZfjU/vu-alumni-spotlight-open-key-to-every-career.html</id><updated>2021-02-18T06:00:00Z</updated><content type="html">I've been invited to come back and give a talk at my university as part of their alumni spotlight series.  The funny thing is, this event has been in the planning since pre-pandemic days last year and was initially to be onsite and in person for everyone.  A year later and it's a different world where we still need to do these things virtually and online.  Next Thursday, 25 Feb 2021 from 16:00 - 17:00 I'll be sharing some motivational insights from my personal career journey since leaving the Vrije Universiteit in Amsterdam.  It's a talk that centers how being open can mean everything to your career. If you are interested, reach out and I'll share the online connection information for this session and we'll be talking about more of the following. The following will be shared online in a virtual event with anyone wanting to attend. OPEN IS KEY TO EVERY CAREER  It's not a coincidence. It's not just luck. It's not going to happen by itself, so what's the secret sauce for accelerating your career path? Understanding what makes a career grow, what choices are crucial, and what actions accelerate or damage your future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in an open source world is what this session provides. Be ready for your next career step using open source principles. Join me for a story sharing a clear and easy to use plan for jump starting your career immediately. Again, reach out if you want to join, I'll share connection information closer to the event. Slides will be posted online on the day of the event.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xg_5DGILIUE" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Tk5_1C1ZfjU/vu-alumni-spotlight-open-key-to-every-career.html</feedburner:origLink></entry><entry><title type="html">Event-driven decisions with Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3VoUhsFI34M/event-driven-decisions-with-kogito.html" /><author><name>Alessandro Costa</name></author><id>https://blog.kie.org/2021/02/event-driven-decisions-with-kogito.html</id><updated>2021-02-17T10:56:18Z</updated><content type="html">In 2021 it’s almost undeniable that modern application development needs to target the cloud, given the requirements of flexibility, scalability and availability imposed by today’s world. Event-driven architectures have proven to be well suited models for this purpose. As a result, we’re adopting these principles in several components of Kogito, which aims to be the next generation cloud-native business automation solution. This blogpost presents a new component that aligns with this view: the event-driven decisions addon. It is available since Kogito v1.2. KEY CONCEPTS This addon enables the evaluation of decision models in an event-driven fashion, so that it can be used as part of an event processing pipeline. It comes in two flavours: Quarkus and Spring Boot. The developer only needs to include the correct version as dependency of his Kogito app and configure the input/output topics. The wiring is done by the Kogito code-generation and framework specific dependency injection. The execution is triggered upon receiving an event containing the initial context from a specific Kafka input topic. The result is then sent to a Kafka output topic (which may be the same). Both input and output events are formatted as . Its capabilities are implemented to be similar to the ones available via REST endpoints: * trigger evaluation of the whole model or of a specific decision service * receive only the context or the full DMN result in the output event * filter out the inputs from the output context, no matter if returned alone or inside the DMN result EVENT STRUCTURE INPUT EVENT A model evaluation is triggered by a specific event called DecisionRequest. Here is the list of the supported fields, including the optional ones: FieldPurposeMandatoryDefaultdataInput contextyes–idCloudEvent IDyes–kogitodmnevaldecisionName of decision service to evaluate. If specified the engine triggers the evaluation of this service only.nonullkogitodmnfilteredctxBoolean flag to enable/disable filtering out inputs from the contextnofalsekogitodmnfullresultBoolean flag to enable/disable receiving full DMN result as outputnofalsekogitodmnmodelnameName of DMN model to evaluateyes–kogitodmnmodelnamespaceNamespace of DMN model to evaluateyes–sourceCloudEvent sourceyes–specversionMust be equal to 1.0 as mandated by CloudEvent specificationyes–subjectIf specified, the engine will put the same value as subject of the output event. Its usage is up to the caller (e.g. as correlation ID).nonulltypeMust be equal to DecisionRequestyes– EXAMPLE OF DECISIONREQUEST EVENT { "specversion": "1.0", "id": "a89b61a2-5644-487a-8a86-144855c5dce8", "source": "SomeEventSource", "type": "DecisionRequest", "kogitodmnmodelname": "Traffic Violation", "Kogitodmnmodelnamespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF", "data": { "Driver": { "Age": 25, "Points": 13 }, "Violation": { "Type": "speed", "Actual Speed": 115, "Speed Limit": 100 } } } OUTPUT EVENTS If the request is evaluated successfully, the system returns two different types of output events depending on the value of the kogitodmnfullresult flag: * DecisionResponse if only the output context is returned * DecisionResponseFull if the full DMN result is returned The results are always in the data field. EXAMPLE OF DECISIONRESPONSE EVENT { "specversion": "1.0", "id": "d54ace84-6788-46b6-a359-b308f8b21778", "source": "Traffic+Violation", "type": "DecisionResponse", "kogitodmnmodelnamespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF", "kogitodmnmodelname": "Traffic Violation", "data": { "Violation": { "Type": "speed", "Speed Limit": 100, "Actual Speed": 115 }, "calculateTotalPoints": "function calculateTotalPoints( driver, fine )", "Driver": { "Points": 13, "Age": 25 }, "Fine": { "Points": 3, "Amount": 500 }, "Should the driver be suspended?": "No" } } EXAMPLE OF DECISIONRESPONSEFULL EVENT { "specversion": "1.0", "id": "a18c409d-ab1f-4d6b-abc7-97327df8585f", "source": "Traffic+Violation", "type": "DecisionResponseFull", "kogitodmnmodelnamespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF", "kogitodmnmodelname": "Traffic Violation", "data": { "namespace": "https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF", "modelName": "Traffic Violation", "dmnContext": { "Violation": { "Type": "speed", "Speed Limit": 100, "Actual Speed": 115 }, "calculateTotalPoints": "function calculateTotalPoints( driver, fine )", "Driver": { "Points": 13, "Age": 25 }, "Fine": { "Points": 3, "Amount": 500 }, "Should the driver be suspended?": "No" }, "messages": [], "decisionResults": [ { "decisionId": "_4055D956-1C47-479C-B3F4-BAEB61F1C929", "decisionName": "Fine", "result": { "Points": 3, "Amount": 500 }, "messages": [], "evaluationStatus": "SUCCEEDED" }, { "decisionId": "_8A408366-D8E9-4626-ABF3-5F69AA01F880", "decisionName": "Should the driver be suspended?", "result": "No", "messages": [], "evaluationStatus": "SUCCEEDED" } ] } } ERROR EVENTS If, for some reason, the request event is malformed or contains wrong information so that the evaluation can’t be triggered, a DecisionResponseError is sent as output. In this case the data field contains a string that specifies the error type: Error TypeMeaningBAD_REQUESTMalformed input event (e.g. when some mandatory fields are missing)MODEL_NOT_FOUNDThe specified model can’t be found in the current service EXAMPLES The Kogito Examples repository contains two examples, and , that you can use as a starting point to practice with this addon. They also contain tests for every possible variation in the structure of the input/output events supported by the addon. CONCLUSION If you liked this article and are interested in the evolution of Kogito, stay tuned for more news! Thanks for reading. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3VoUhsFI34M" height="1" width="1" alt=""/&gt;</content><dc:creator>Alessandro Costa</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/event-driven-decisions-with-kogito.html</feedburner:origLink></entry><entry><title type="html">RefCard - Getting started with OpenShift published</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/isucJI91iQw/refcard-getting-started-with-openshift.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/PJSsJ9oNvsU/refcard-getting-started-with-openshift.html</id><updated>2021-02-16T06:00:00Z</updated><content type="html">Earlier this month a writing project I was working on, a getting started with OpenShift reference card, went live .  The project was to put together a getting started guide that walks a developer through getting OpenShift, installing it on a local machine, and a quick start to using one of the provided operators.  Basically, providing the first steps any developer would need to get started experiencing cloud-native application development. Even better, it's using CodeReady Containers to allow any developer to follow along with this refcard and experience OpenShift on their own local developer machine. Everything shown in this refcard is freely available for download and the process followed has been put into a project that anyone can use. The entire document is eight pages and includes code examples to help you on your journey to exploring and using cloud-native development on a Kubernetes based platform. The best way to get started is to share a bit of the introduction and then you can head over to .  ABSTRACT Red Hat OpenShift is an enterprise open source container orchestration platform. It’s a software product that includes components of the Kubernetes container management project, but adds productivity and security features that are important to large-scale companies. In this Refcard, learn how to get started with the developer usage of Red Hat OpenShift to help you go hands-on with installing a local development cluster on your own machine. TABLE OF CONTENTS * Introduction * What Is OpenShift? * Installing OpenShift * Exploring the OpenShift Platform * Installing With Operators * Conclusion INTRODUCTION What is Red Hat’s OpenShift Container Platform, and what does it offer in the way of easier-to-use Kubernetes? It’s an enterprise-ready Kubernetes container platform with full-stack automated operations to manage hybrid cloud, multi-cloud, and edge deployments. No matter the cloud provider, with Red Hat OpenShift, you can give your developers an open-standards-based container platform on Kubernetes that not only runs your application workloads but provides cloud portability for those workloads.  This Refcard gets you started on developer usage of Red Hat OpenShift and helps you go hands-on with installing a local development cluster using CodeReady Containers on your own machine. After installation, you’ll see an example of deploying the available data protection and management solution using the operator available on the Operator Hub.  That's the preview so far, hope you like it enough to want to read the entire Refcard, if so .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/isucJI91iQw" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/PJSsJ9oNvsU/refcard-getting-started-with-openshift.html</feedburner:origLink></entry><entry><title type="html">Keycloak 12.0.3 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uAH8QdcS5Wk/keycloak-1203-released.html" /><author><name /></author><id>https://www.keycloak.org//2021/02/keycloak-1203-released.html</id><updated>2021-02-16T00:00:00Z</updated><content type="html">To download the release go to . ALL RESOLVED ISSUES The full list of resolved issues are available in UPGRADING Before you upgrade remember to backup your database and check the for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uAH8QdcS5Wk" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://www.keycloak.org//2021/02/keycloak-1203-released.html</feedburner:origLink></entry></feed>
